# check casing consistency in character columns
for(i in char_cols){
print(paste0(i,": ", length(unique(results_p1$i)) == length(unique(toupper(results_p1$i)))))
}
# remove whitespace in character columns
results_p1[,char_cols] <- lapply(results_p1[,char_cols], trimws)
# remove duplicates
results_p1 <- distinct(results_p1)
# make NA Rank equal to 0
results_p1$Rank[is.na(results_p1$Rank)] <- 0
# replace missing Age data with median for Sport, Gender
impute_median <- function(x) replace(x, is.na(x), median(x, na.rm = TRUE))
results_p1 <- results_p1 %>% group_by(Sport, Gender) %>% mutate(Age = impute_median(Age)) %>% ungroup()
# # make NA Rank equal to 0
# results_p1$Rank[is.na(results_p1$Rank)] <- 0
#
# # replace missing Age data with median for Sport, Gender
# impute_median <- function(x) replace(x, is.na(x), median(x, na.rm = TRUE))
# results_p1 <- results_p1 %>% group_by(Sport, Gender) %>% mutate(Age = impute_median(Age)) %>% ungroup()
## create lookup of athleteID and appearances
app_lookup <- results_raw %>%
# keep only athletes appearing in last 6 Games
filter(athleteID %in% results_p1$athleteID) %>%
# assign Olympic Games appearance to each athlete (1 = 1st appearance, 2 = 2nd appearance, etc.)
mutate(
c_EditionCity = factor(c_EditionCity, levels = c(
'Tokyo',
'Mexico City',
'Munich',
'Montreal',
'Moscow',
'Los Angeles',
'Seoul',
'Barcelona',
'Atlanta',
'Sydney',
'Athens',
'Beijing',
'London',
'Rio de Janeiro'))
) %>%
group_by(athleteID) %>%
arrange(athleteID, c_EditionCity) %>%
mutate(appearance = as.integer(factor(c_EditionCity, levels = unique(c_EditionCity)))) %>%
ungroup() %>%
mutate(
c_EditionCity=as.character(c_EditionCity),
# calculated accumulated medals & best rank
Medal = ifelse(Medal==0,0,1),
Rank = ifelse(Rank==0|is.na(Rank),NA,Rank)) %>%
group_by(athleteID) %>%
arrange(appearance) %>%
mutate(cum_medals = cumsum(Medal),
best_rank = runner::min_run(Rank)) %>%
ungroup() %>%
group_by(athleteID, c_EditionCity, appearance) %>%
summarise(cum_medals = max(cum_medals),
best_rank = min(best_rank, na.rm = TRUE), .groups='drop') %>%
# now shift accumulated medals to previous medals
group_by(athleteID) %>%
arrange(appearance) %>%
mutate(prev_medals = lag(cum_medals, default = 0),
prev_best_rank = lag(best_rank, default = NA)) %>%
select(-cum_medals, -best_rank)
# replace Inf and NA values with 0
app_lookup$prev_best_rank[!is.finite(app_lookup$prev_best_rank)] <- 0
results_p2 <- results_p1 %>%
# add appearance using lookup
left_join(app_lookup, by=c("athleteID","c_EditionCity")) %>%
# add home Games label
mutate(
home = ifelse(
c_EditionCity=='Atlanta' & Nationality=='USA',1,ifelse(
c_EditionCity=='Sydney' & Nationality=='AUS',1,ifelse(
c_EditionCity=='Athens' & Nationality=='GRE',1,ifelse(
c_EditionCity=='Beijing' & Nationality=='CHN',1,ifelse(
c_EditionCity=='London' & Nationality=='GBR',1,ifelse(
c_EditionCity=='Rio de Janeiro' & Nationality=='BRA',1,0))))))
)  %>%
# label event as individual (1) or team (0)
group_by(phase_result_id) %>%
mutate(
individual = ifelse(
n_distinct(athleteID)==1,1,ifelse(
n_distinct(athleteID)>1,0,NA))
) %>%
ungroup() %>%
# calculate direct competitors in the field
group_by(Sport, Discipline, Gender, c_EditionCity) %>%
mutate(field = n_distinct(phase_result_id)) %>%
ungroup() %>%
# calculate total events competed in at each Games edition by individual athlete
group_by(c_EditionCity, athleteID) %>%
mutate(total_events = n_distinct(phase_result_id)) %>%
ungroup()
saveRDS(results_p1, paste0(dDir,'results_p1.rds'))
saveRDS(results_p2, paste0(dDir,'results_p2.rds'))
results_p1 <- readRDS(paste0(dDir,'results_p1.rds'))
results_p2 <- readRDS(paste0(dDir,'results_p2.rds'))
# read populations RDS file for population data
populations <- readRDS(paste0(dDir,'populations.rds')) %>%
mutate(Nationality = gsub('NSW','NSWIS',Nationality))
knitr::opts_chunk$set(echo = TRUE)
## Clean up
rm(list=ls())
## set directories
# Production version
cDir<-'.'
dDir <- paste0(cDir,'/data/')
# Test version on windows
if (Sys.info()['sysname']=="Windows"){
cDir<-dirname(rstudioapi::getActiveDocumentContext()$path)
dDir <- paste0(cDir,'/data/')
}
## load libraries
library(tidyverse)
library(DBI)
library(RODBC)
library(ggplot2)
library(DT)
library(VIM)
results_p1 <- readRDS(paste0(dDir,'results_p1.rds'))
results_p2 <- readRDS(paste0(dDir,'results_p2.rds'))
# read populations RDS file for population data
populations <- readRDS(paste0(dDir,'populations.rds')) %>%
mutate(Nationality = gsub('NSW','NSWIS',Nationality))
View(results_p1)
View(results_p1)
gn_un <- 'gwehbe@nswis.com.au'
gn_pw <- 'bcharry.9239236'
# # read results data from local RDS file
results_read <- readRDS(paste0(dDir,'results.rds'))
View(results_read)
results_read %>% filter(Rank %in% c(1,2,3)) %>% group_by(year(Start_date)) %>% summarise(n=n_distinct(Nationality))
View(results_read %>% filter(Rank %in% c(1,2,3)) %>% group_by(year(Start_date), Nationality) %>% summarise(medals=n_distinct(phase_result_id)))
View(results_read %>% filter(Rank %in% c(1,2,3)) %>% mutate(Year = year(Start_date)) %>% group_by(Year, Nationality) %>% summarise(medals=n_distinct(phase_result_id),.groups='drop') %>% group_by(year) %>% mutate(total_meds = sum(medals)))
View(results_read %>% filter(Rank %in% c(1,2,3)) %>% mutate(Year = year(Start_date)) %>% group_by(Year, Nationality) %>% summarise(medals=n_distinct(phase_result_id),.groups='drop') %>% group_by(Year) %>% mutate(total_meds = sum(medals)))
n_distinct(results_read$phase_result_id[which(results_read$Rank %in% c(1,2,3) & year(results_read$Start_date))==2021])
n_distinct(results_read$phase_result_id[which(results_read$Rank %in% c(1,2,3) & year(results_read$Start_date)==2021)])
n_distinct(results_read$phase_result_id[which(results_read$Rank %in% c(1,2,3) & year(results_read$Start_date)==2016)])
look <- results_read %>% filter(Rank %in% c(1,2,3)) %>% mutate(Year = year(Start_date)) %>% group_by(Year, Nationality) %>% summarise(medals=n_distinct(phase_result_id),.groups='drop') %>% group_by(year) %>% mutate(total_meds = sum(medals))
look <- results_read %>% filter(Rank %in% c(1,2,3)) %>% mutate(Year = year(Start_date)) %>% group_by(Year, Nationality) %>% summarise(medals=n_distinct(phase_result_id),.groups='drop') %>% group_by(Year) %>% mutate(total_meds = sum(medals))
View(look)
look <- look %>% arrange(desc(Year)) %>% group_by(Year) %>% arrange(desc(medals))
look <- look %>% arrange(desc(Year), desc(medals))
View(look %>% group_by(Year) %>% top_n(medals, 10))
View(look %>% group_by(Year) %>% top_n(10, medals))
View(look %>% group_by(Year) %>% top_n(10, medals) %>% group_by(Year) %>% summarise(top10 = sum(medals)/max(total_meds)))
library(tidyverse)
library(DBI)
library(RODBC)
library(ggplot2)
library(DT)
library(VIM)
gn_un <- 'gwehbe@nswis.com.au'
gn_pw <- 'bcharry.9239236'
con <- odbcConnect("GraceNote", uid = gn_un, pwd = gn_pw)
results <- sqlQuery(con, sprintf("SELECT
PhaseResults.c_SportName as Sport,
COUNT(DISTINCT CONCAT(PhaseResults.c_EventName, PhaseResults.c_EventGender)) AS MWO
FROM PhaseResults
LEFT JOIN Edition ON
Edition.n_EditionID = PhaseResults.n_EditionID
LEFT JOIN Phase ON
PhaseResults.n_PhaseID = Phase.n_PhaseID
WHERE
PhaseResults.c_CompetitionName IN ('Olympic Games') AND
Edition.c_EditionCity IN (
'Tokyo') AND
Edition.c_CompetitionSetName IN ('Summer Games') AND
Edition.d_EditionStartDate > '2020-01-01' AND
Phase.b_IsEventPhase = 1 ")
results <- sqlQuery(con, sprintf("SELECT
PhaseResults.c_SportName as Sport,
COUNT(DISTINCT CONCAT(PhaseResults.c_EventName, PhaseResults.c_EventGender)) AS MWO
FROM PhaseResults
LEFT JOIN Edition ON
Edition.n_EditionID = PhaseResults.n_EditionID
LEFT JOIN Phase ON
PhaseResults.n_PhaseID = Phase.n_PhaseID
WHERE
PhaseResults.c_CompetitionName IN ('Olympic Games') AND
Edition.c_EditionCity IN (
'Tokyo') AND
Edition.c_CompetitionSetName IN ('Summer Games') AND
Edition.d_EditionStartDate > '2020-01-01' AND
Phase.b_IsEventPhase = 1 ")
results <- sqlQuery(con, sprintf("SELECT
PhaseResults.c_SportName as Sport,
COUNT(DISTINCT CONCAT(PhaseResults.c_EventName, PhaseResults.c_EventGender)) AS MWO
FROM PhaseResults
LEFT JOIN Edition ON
Edition.n_EditionID = PhaseResults.n_EditionID
LEFT JOIN Phase ON
PhaseResults.n_PhaseID = Phase.n_PhaseID
WHERE
PhaseResults.c_CompetitionName IN ('Olympic Games') AND
Edition.c_EditionCity IN (
'Tokyo') AND
Edition.c_CompetitionSetName IN ('Summer Games') AND
Edition.d_EditionStartDate > '2020-01-01' AND
Phase.b_IsEventPhase = 1
GROUP BY PhaseResults.c_SportName")
results <- sqlQuery(con, sprintf("SELECT
Phase.b_IsEventPhase,
Edition.c_CompetitionSetName as Comp_set,
PhaseResults.c_CompetitionName as Comp_set_detail,
PhaseResults.c_EventPhaseEventName as EventPhaseName,
PhaseResults.c_SportName as Sport,
PhaseResults.c_EventName as Discipline,
PhaseResults.c_EventGender as Gender,
PhaseResults.c_NOCShort as Nationality,
PhaseResults.n_PersonAgeYears as Age,
PhaseResults.c_PersonCompetedAsName as Person,
Person.d_PersonDateOfBirth as DOB,
PhaseResults.n_Rank as Rank,
PhaseResults.n_RankMedal as Medal,
Edition.d_EditionStartDate as Start_date,
Edition.d_EditionEndDate as End_date,
PhaseResults.n_PhaseResultID as phase_result_id,
PhaseResultsTeamMembers.c_PersonCompetedAsName as Person_team,
PhaseResultsTeamMembers.n_PersonAgeInYears as Age_team,
CASE WHEN PhaseResults.n_PersonID = -1 THEN PhaseResultsTeamMembers.n_PersonID
ELSE PhaseResults.n_PersonID END as athleteID,
PhaseResults.d_ModifyDate as result_modifydate,
Edition.d_ModifyDate as edition_modifydate,
Person.d_ModifyDate as person_modifydate,
PhaseResultsTeamMembers.d_ModifyDate as team_modifyDate,
PhaseResults.n_CompetitionID,
Edition.c_EditionCity,
Edition.c_EditionCountry,
PhaseResults.c_ResultType,
PhaseResults.c_Result
FROM PhaseResults
LEFT JOIN Person ON
Person.n_PersonID =PhaseResults.n_PersonID
LEFT JOIN Edition ON
Edition.n_EditionID = PhaseResults.n_EditionID
LEFT JOIN Phase ON
PhaseResults.n_PhaseID = Phase.n_PhaseID
FULL OUTER JOIN PhaseResultsTeamMembers ON
PhaseResultsTeamMembers.n_PhaseResultID = PhaseResults.n_PhaseResultID
WHERE
PhaseResults.c_CompetitionName IN ('Olympic Games') AND
Edition.c_EditionCity IN (
'Tokyo') AND
Edition.c_CompetitionSetName IN ('Summer Games') AND
Edition.d_EditionStartDate > '2020-01-01' AND
Phase.b_IsEventPhase = 1 ")
results <- sqlQuery(con, sprintf("SELECT
Phase.b_IsEventPhase,
Edition.c_CompetitionSetName as Comp_set,
PhaseResults.c_CompetitionName as Comp_set_detail,
PhaseResults.c_EventPhaseEventName as EventPhaseName,
PhaseResults.c_SportName as Sport,
PhaseResults.c_EventName as Discipline,
PhaseResults.c_EventGender as Gender,
PhaseResults.c_NOCShort as Nationality,
PhaseResults.n_PersonAgeYears as Age,
PhaseResults.c_PersonCompetedAsName as Person,
Person.d_PersonDateOfBirth as DOB,
PhaseResults.n_Rank as Rank,
PhaseResults.n_RankMedal as Medal,
Edition.d_EditionStartDate as Start_date,
Edition.d_EditionEndDate as End_date,
PhaseResults.n_PhaseResultID as phase_result_id,
PhaseResultsTeamMembers.c_PersonCompetedAsName as Person_team,
PhaseResultsTeamMembers.n_PersonAgeInYears as Age_team,
CASE WHEN PhaseResults.n_PersonID = -1 THEN PhaseResultsTeamMembers.n_PersonID
ELSE PhaseResults.n_PersonID END as athleteID,
PhaseResults.d_ModifyDate as result_modifydate,
Edition.d_ModifyDate as edition_modifydate,
Person.d_ModifyDate as person_modifydate,
PhaseResultsTeamMembers.d_ModifyDate as team_modifyDate,
PhaseResults.n_CompetitionID,
Edition.c_EditionCity,
Edition.c_EditionCountry,
PhaseResults.c_ResultType,
PhaseResults.c_Result
FROM PhaseResults
LEFT JOIN Person ON
Person.n_PersonID =PhaseResults.n_PersonID
LEFT JOIN Edition ON
Edition.n_EditionID = PhaseResults.n_EditionID
LEFT JOIN Phase ON
PhaseResults.n_PhaseID = Phase.n_PhaseID
FULL OUTER JOIN PhaseResultsTeamMembers ON
PhaseResultsTeamMembers.n_PhaseResultID = PhaseResults.n_PhaseResultID
WHERE
PhaseResults.c_CompetitionName IN ('Olympic Games') AND
Edition.c_EditionCity IN (
'Tokyo') AND
Edition.c_CompetitionSetName IN ('Summer Games') AND
Edition.d_EditionStartDate > '2020-01-01' AND
Phase.b_IsEventPhase = 1 ")
results <- sqlQuery(con, sprintf("SELECT
Phase.b_IsEventPhase,
Edition.c_CompetitionSetName as Comp_set,
PhaseResults.c_CompetitionName as Comp_set_detail,
PhaseResults.c_EventPhaseEventName as EventPhaseName,
PhaseResults.c_SportName as Sport,
PhaseResults.c_EventName as Discipline,
PhaseResults.c_EventGender as Gender,
PhaseResults.c_NOCShort as Nationality,
PhaseResults.n_PersonAgeYears as Age,
PhaseResults.c_PersonCompetedAsName as Person,
Person.d_PersonDateOfBirth as DOB,
PhaseResults.n_Rank as Rank,
PhaseResults.n_RankMedal as Medal,
Edition.d_EditionStartDate as Start_date,
Edition.d_EditionEndDate as End_date,
PhaseResults.n_PhaseResultID as phase_result_id,
PhaseResultsTeamMembers.c_PersonCompetedAsName as Person_team,
PhaseResultsTeamMembers.n_PersonAgeInYears as Age_team,
CASE WHEN PhaseResults.n_PersonID = -1 THEN PhaseResultsTeamMembers.n_PersonID
ELSE PhaseResults.n_PersonID END as athleteID,
PhaseResults.d_ModifyDate as result_modifydate,
Edition.d_ModifyDate as edition_modifydate,
Person.d_ModifyDate as person_modifydate,
PhaseResultsTeamMembers.d_ModifyDate as team_modifyDate,
PhaseResults.n_CompetitionID,
Edition.c_EditionCity,
Edition.c_EditionCountry,
PhaseResults.c_ResultType,
PhaseResults.c_Result
FROM PhaseResults
LEFT JOIN Person ON
Person.n_PersonID =PhaseResults.n_PersonID
LEFT JOIN Edition ON
Edition.n_EditionID = PhaseResults.n_EditionID
LEFT JOIN Phase ON
PhaseResults.n_PhaseID = Phase.n_PhaseID
FULL OUTER JOIN PhaseResultsTeamMembers ON
PhaseResultsTeamMembers.n_PhaseResultID = PhaseResults.n_PhaseResultID
WHERE
PhaseResults.c_CompetitionName IN ('Olympic Games') AND
Edition.c_EditionCity IN (
'Tokyo') AND
Edition.c_CompetitionSetName IN ('Summer Games') AND
Edition.d_EditionStartDate > '2020-01-01' AND
Phase.b_IsEventPhase = 1 ")
results <- sqlQuery(con, sprintf("SELECT
Phase.b_IsEventPhase,
Edition.c_CompetitionSetName as Comp_set,
PhaseResults.c_CompetitionName as Comp_set_detail,
PhaseResults.c_EventPhaseEventName as EventPhaseName,
PhaseResults.c_SportName as Sport,
PhaseResults.c_EventName as Discipline,
PhaseResults.c_EventGender as Gender,
PhaseResults.c_NOCShort as Nationality,
PhaseResults.n_PersonAgeYears as Age,
PhaseResults.c_PersonCompetedAsName as Person,
Person.d_PersonDateOfBirth as DOB,
PhaseResults.n_Rank as Rank,
PhaseResults.n_RankMedal as Medal,
Edition.d_EditionStartDate as Start_date,
Edition.d_EditionEndDate as End_date,
PhaseResults.n_PhaseResultID as phase_result_id,
PhaseResultsTeamMembers.c_PersonCompetedAsName as Person_team,
PhaseResultsTeamMembers.n_PersonAgeInYears as Age_team,
CASE WHEN PhaseResults.n_PersonID = -1 THEN PhaseResultsTeamMembers.n_PersonID
ELSE PhaseResults.n_PersonID END as athleteID,
PhaseResults.d_ModifyDate as result_modifydate,
Edition.d_ModifyDate as edition_modifydate,
Person.d_ModifyDate as person_modifydate,
PhaseResultsTeamMembers.d_ModifyDate as team_modifyDate,
PhaseResults.n_CompetitionID,
Edition.c_EditionCity,
Edition.c_EditionCountry,
PhaseResults.c_ResultType,
PhaseResults.c_Result
FROM PhaseResults
LEFT JOIN Person ON
Person.n_PersonID =PhaseResults.n_PersonID
LEFT JOIN Edition ON
Edition.n_EditionID = PhaseResults.n_EditionID
LEFT JOIN Phase ON
PhaseResults.n_PhaseID = Phase.n_PhaseID
FULL OUTER JOIN PhaseResultsTeamMembers ON
PhaseResultsTeamMembers.n_PhaseResultID = PhaseResults.n_PhaseResultID
WHERE
PhaseResults.c_CompetitionName IN ('Olympic Games') AND
Edition.c_EditionCity IN (
'Tokyo') AND
Edition.c_CompetitionSetName IN ('Summer Games') AND
Edition.d_EditionStartDate > '2020-01-01' AND
Phase.b_IsEventPhase = 1 "))
odbcClose(con)
con <- odbcConnect("GraceNote", uid = gn_un, pwd = gn_pw)
con <- odbcConnect("GraceNote", uid = gn_un, pwd = gn_pw)
results <- sqlQuery(con, sprintf("SELECT
Phase.b_IsEventPhase,
Edition.c_CompetitionSetName as Comp_set,
PhaseResults.c_CompetitionName as Comp_set_detail,
PhaseResults.c_EventPhaseEventName as EventPhaseName,
PhaseResults.c_SportName as Sport,
PhaseResults.c_EventName as Discipline,
PhaseResults.c_EventGender as Gender,
PhaseResults.c_NOCShort as Nationality,
PhaseResults.n_PersonAgeYears as Age,
PhaseResults.c_PersonCompetedAsName as Person,
Person.d_PersonDateOfBirth as DOB,
PhaseResults.n_Rank as Rank,
PhaseResults.n_RankMedal as Medal,
Edition.d_EditionStartDate as Start_date,
Edition.d_EditionEndDate as End_date,
PhaseResults.n_PhaseResultID as phase_result_id,
PhaseResultsTeamMembers.c_PersonCompetedAsName as Person_team,
PhaseResultsTeamMembers.n_PersonAgeInYears as Age_team,
CASE WHEN PhaseResults.n_PersonID = -1 THEN PhaseResultsTeamMembers.n_PersonID
ELSE PhaseResults.n_PersonID END as athleteID,
PhaseResults.d_ModifyDate as result_modifydate,
Edition.d_ModifyDate as edition_modifydate,
Person.d_ModifyDate as person_modifydate,
PhaseResultsTeamMembers.d_ModifyDate as team_modifyDate,
PhaseResults.n_CompetitionID,
Edition.c_EditionCity,
Edition.c_EditionCountry,
PhaseResults.c_ResultType,
PhaseResults.c_Result
FROM PhaseResults
LEFT JOIN Person ON
Person.n_PersonID =PhaseResults.n_PersonID
LEFT JOIN Edition ON
Edition.n_EditionID = PhaseResults.n_EditionID
LEFT JOIN Phase ON
PhaseResults.n_PhaseID = Phase.n_PhaseID
FULL OUTER JOIN PhaseResultsTeamMembers ON
PhaseResultsTeamMembers.n_PhaseResultID = PhaseResults.n_PhaseResultID
WHERE
PhaseResults.c_CompetitionName IN ('Olympic Games') AND
Edition.c_EditionCity IN (
'Tokyo') AND
Edition.c_CompetitionSetName IN ('Summer Games') AND
Edition.d_EditionStartDate > '2020-01-01' AND
Phase.b_IsEventPhase = 1 "))
odbcClose(con)
View(results)
results %>% group_by(year(Start_date)) %>% tally()
odbcClose(con)
View(results %>% group_by(Sport) %>% summarise(n = n_distinct(Discipline, Gender)))
odbcClose(con)
knitr::opts_chunk$set(echo = TRUE)
## Clean up
rm(list=ls())
## set directories
# Production version
cDir<-'.'
dDir <- paste0(cDir,'/data/')
# Test version on windows
if (Sys.info()['sysname']=="Windows"){
cDir<-dirname(rstudioapi::getActiveDocumentContext()$path)
dDir <- paste0(cDir,'/data/')
}
## load libraries
library(tidyverse)
library(DBI)
library(RODBC)
library(ggplot2)
library(DT)
library(VIM)
# # read results data from local RDS file
results_read <- readRDS(paste0(dDir,'results.rds'))
# read NSWIS result IDs to join onto main results data
nswisResults <- readRDS(paste0(dDir,'nswisResults.rds'))
# remove first 3 columns (all values are the same in these columns)
results_raw <- results_read[,4:ncol(results_read)]
look <- results_raw %>% filter(Rank %in% c(1,2,3))
look <- look %>% mutate(Year = year(Start_date))
View(look %>% group_by(Year) %>% summarise(n=n_distinct(Nationality)))
## Clean up
rm(list=ls())
knitr::opts_chunk$set(echo = TRUE)
## Clean up
rm(list=ls())
## set directories
# Production version
cDir<-'.'
dDir <- paste0(cDir,'/data/')
# Test version on windows
if (Sys.info()['sysname']=="Windows"){
cDir<-dirname(rstudioapi::getActiveDocumentContext()$path)
dDir <- paste0(cDir,'/data/')
}
## load libraries
library(tidyverse)
library(DBI)
library(RODBC)
library(ggplot2)
library(DT)
library(VIM)
# # read results data from local RDS file
results_read <- readRDS(paste0(dDir,'results.rds'))
# read NSWIS result IDs to join onto main results data
nswisResults <- readRDS(paste0(dDir,'nswisResults.rds'))
# remove first 3 columns (all values are the same in these columns)
results_raw <- results_read[,4:ncol(results_read)]
View(results_raw %>% filter(c_EditionCity=='Tokyo' & Start_date > '2021-01-01'))
results <- results_raw %>% filter(c_EditionCity=='Tokyo' & Start_date > '2021-01-01') %>% select(Sport, Discipline, Gender, Nationality, Age, Rank, Medal, resultID=phase_result_id, athleteID, EditionCity=c_EditionCity, ResultType = c_ResultType) %>% mutate(athleteResultID = paste0("r",resultID,athleteID))
nrow(results)
nrow(results %>% distinct())
write.csv(results,"C:/Users/gwehbe/Downloads/resultsExport.csv",row.names = FALSE)
View(results_raw)
View(results_raw %>% filter(c_EditionCity=='Tokyo' & Start_date > '2021-01-01'))
results_p1 <- readRDS(paste0(dDir,'results_p1.rds'))
results_p2 <- readRDS(paste0(dDir,'results_p2.rds'))
# read populations RDS file for population data
populations <- readRDS(paste0(dDir,'populations.rds')) %>%
mutate(Nationality = gsub('NSW','NSWIS',Nationality))
View(results_p1 %>% filter(c_EditionCity=='Tokyo' & Year ==2021))
results <- results_p1 %>% filter(c_EditionCity=='Tokyo' & Year==2021) %>% select(Sport, Discipline, Gender, Nationality, Age, Rank, Medal, resultID=phase_result_id, athleteID, EditionCity=c_EditionCity, ResultType = c_ResultType) %>% mutate(athleteResultID = paste0("r",resultID,athleteID))
write.csv(results,"C:/Users/gwehbe/Downloads/resultsExport.csv",row.names = FALSE)
